---------
Решения: |
---------
a) Напишете shell script `wuhan.sh`, който изписва броя смъртни случаи в града
с английско име `Wuhan`.

1. Използваме командата cat city.csv, за да видим имената на градовете, изписани и на китайски език, и на английски.

2. На нас ни трябва конкретно град Ухан, което ни позволява да използваме командите:
grep 'Wuhan' city.csv ИЛИ cat city.csv | grep 'Wuhan'

3. В условието на задачата се иска броят смъртни случаи в град Ухан, което означава, че трябва да използваме 
spread.csv като информация, защото останалите файлове не ни дават тази, която търсим. Ако напишем cat spread.csv, 
ние ще видим, че в първата колонка са изписани градовете на китайски език. Това означава, че ние от първия файл 
city.csv трябва да вземем името на града Ухан на китайски език и да го подадем към spread.csv, за да вземем стойността, 
която се търси в условието.
Към горната команда добавяме 
cut -d ',' -f1, за да вземем името на град Ухан на китайски език
awk -F ',' '{print $1}' -> също може да използваме и това
Към момента имаме: grep 'Wuhan' city.csv | cut -d ',' -f1 -> взели сме името на град Ухан на китайски език

4. Сега трябва да подадем извлечената информация към spread.csv, за да намерим град Ухан и да изведем стойността, 
която ни трябва.
До този момент имаме: grep $(grep 'Wuhan' city.csv | cut -d ',' -f1) spread.csv
Вече сме намерили град Ухан на китайски език и съответната статистика за този град.
От условието се иска да изведем броя смъртни случаи в град Ухан. От упътването към задачата виждаме, че тази информация се
намира в четвъртата колона спрямо символ ','

Краен отговор на задачата: 
grep $(grep 'Wuhan' city.csv | cut -d ',' -f1) spread.csv | cut -d ',' -f4

5. Сега трябва да създадем shell script за нашата команда и съответния отговор.
Създаваме си файл wuhan.sh:
touch wuhan.sh

6. Сега трябва да пишем в съответния shell script. В терминала пишем:
vi wuhan.sh (можеше директно да напишем vi wuhan.sh и щеше автоматично да си създаде файла, след като го запазим)

7. В самия shell script пишем следното:
#!/bin/sh
echo $(grep $(grep 'Wuhan' city.csv | cut -d ',' -f1) spread.csv | cut -d ',' -f4)

8. Запазваме написаната информация и се връщаме в терминала, където можем да напишем
bash wuhan.sh, което ще изведе търсената от нас информация, но преди това трябва да променим правата на wuhan.sh: chmod 755
wuhan.sh или chmod a+x wuhan.sh

b) Напишете shell script `top_cities.sh`, който извлича десетте града с най-високо
ниво на смъртност, за които има поне 101 регистрирани случая,
и за всеки от тях извежда името на града и нивото на смъртност,
разделени с двоеточие и интервал и сортирани по ниво на смъртност. 

1. Информацията, която се иска от нас, можем да я получим от spread.csv и заради това прочитаме него: cat spread.csv

2. Трябва да потърсим в кои градове има поне 101 регистрирани случая. Регистрираните случаи са в колонка 3. За тази цел 
можем да използваме awk, като вземем за разделител символ ',': awk -F ','

3. За да направим проверка в колонка 3, можем да използваме '$3>=101' след разделител-символ ',' и когато намерим в 
колонка 3 стойност, която е поне 101, тогава извеждаме колонка 1, която съдържа името на съответния град, след това 
извеждаме ': ' (както ни е зададено в условието) и след това съответно изчисляваме нивото на смъртност - 
(брой смъртни случаи/брой регистрирани случаи)*1000, закръглено надолу. Изчислението на нивото на смъртност можем да го 
направим,  като вземем колонка 4 и я разделим на колонка 3, след което умножим по 1000. За да закръглим надолу, можем да 
използваме int(получения резултат). 
До тук имаме:
cat spread.csv | awk -F ',' '$3>=101 { print $1 echo ": " int(($4/$3)*1000) }'

Тук print $1 echo ": " int(($4/$3)*1000) са едновременно в {}, за да се изкара информацията точно така, както сме я записали 
и както я искаме. Ако в {} беше само print $1, а останалите команди след това бяха извън {}, то тогава щяха да се изкарат 
отново тези градове, в които има поне 101 случая (защото така сме го задали като условие), но след това щяха да се изкарат 
останалите 3 колонки с информация относно <брой заподозрени случаи>, <брой регистрирани случаи> и <брой смъртни случаи>. 

4. В момента имаме всички градове, които имат поне 101 регистрирани случаи, като сме изчислили и нивото на смъртност. Сега
трябва да подредим градовете по ниво на смъртност. В момента имаме изкаран резултат от вида <име на град на китайски език>:
<ниво на смъртност, закръглено надолу>
За да подредим градовете по ниво на смъртност, можем да използваме командата sort -nr -k2, където -n означава, че закръгляме
числено, -r означава, че искаме да подредим по обратен ред, за да можем да вземем след това първите 10 града, които имат най
високо ниво на смъртност, -t ':' означава, че взимаме за разделител двоеточие, а -k2 означава, че подреждаме по колонка 2 от
резултата, който сме изкарали (подреждаме по ниво на смъртност).
Дотук имаме:
cat spread.csv | awk -F ',' '$3>=101 { print $1 echo ": " int(($4/$3)*1000) }' | sort -nr -t ':' -k2

5. Сега искаме да вземем първите 10 града с най-високо ниво на смъртност. За тази цел използваме командата head -n 10

Краен отговор:
cat spread.csv | awk -F ',' '$3>=101 { print $1 echo ": " int(($4/$3)*1000) }' | sort -nr -t ':' -k2 | head -n 10

В терминала пишем vi top_cities.sh
След това записваме:

#!/bin/sh
printf '%s\n' "$(cat spread.csv | awk -F ',' '$3>=101 { print $1 echo ": " int(($4/$3)*1000) }' | sort -nr -t ':' -k2 | head -n
10)"

Този път използваме printf, защото чрез '%s\n' след всяко извикване на command поставяме нов ред и градовете излизат един под
друг, а не един до друг.

Запазваме написаното дотук, отново променяме правата на top_cities.sh: chmod 755 top_cities.sh, и извикваме в терминала bash
top_cities.sh, което ще изведе търсената от нас информация.

c) Напишете shell script `top_provinces.sh`, който извлича десетте провинции с най-високо
общо ниво на смъртност, като за всяка от тях извежда името на провинцията и нивото
на смъртност, разделени с двоеточие и интервал.

1. Отново информацията, която ни интересува, можем да я вземем от spread.csv. Но в този файл имаме имената на градовете на
китайски език и информацията за всеки град. Нас в случая ни интересуват провинциите. Във файла city_province.csv в първата
колона имаме имената на градовете на китайски език, а във втората имаме имената на провинциите, в които се намират 
съответните градове, отново на китайски език. Във файла spread.csv в първата колона имаме градовете на китайски език. 
Съответно можем да слеем информацията от двата файла и накрая да изведем тази, която ни интересува. В случая можем да 
използваме командата join. За да използваме тази команда обаче, е необходимо да подадем подредени файлове, които да слеем. 
Нямаме право да използваме временни файлове, което означава, че не можем първо да сортираме двата файла и да ги запишем 
встрани, след което да ги слеем. Заради това трябва по друг начин да подадем самите файлове и то подредени. Това може да стане 
по следния начин:

join -t ',' <(sort city_province.csv) <(sort spread.csv)

-t ',' служи, защото и в двата файла основен разделител е символът ',' и по този начин ще можем да слеем двата файла. Чрез
командите <(sort city_province.csv) <(sort spread.csv) ние подреждаме двата файла само за самата задача (не ги променяме въобще
тях извън терминала). Вече сме слели двата файла и като информация имаме <име на град на китайски език>,<име на провинция на
китайски език> и останалата информация от spread.csv.

2. В момента изходът ни е подреден спрямо имената на градовете. Нас ни интересува да ги подредим спрямо провинциите, за да 
можем после за всяка провинция да съберем броя на регистрираните случаи и броя на смъртните случаи, след което за всяка
провинция да изчислим нивото на смъртност. За случая бихме могли да използваме:

sort -t ',' -k2 -> в случая подреждаме спрямо колона 2 (спрямо провинциите), като за разделител взимаме символ ','

Дотук имаме: join -t ',' <(sort city_province.csv) <(sort spread.csv) | 
             sort -t ',' -k2

3. Вече сме подредили спрямо провинциите, в които се намира всеки град. Сега нашата цел е да съберем броя на регистрираните
случаи и броя на смъртните случаи за всяка една отделна провинция. Това би станало по следния начин:

awk -F ',' '$2!=p{ print p, s, m; p=$2; s=0; m=0} {s+=$4; m+=$5 } END { print p, s, m }'

В случая за разделител взимаме символа ','. Имената на провинциите се намират във втората колона. Ние искаме да събираме броя 
на регистрираните случаи и броя на смъртните случаи, докато не срещнем провинция, която е различна от сегашната, и всеки път 
ще започваме наново да събираме за всяка провинция. Тогава казваме съответната колона на провинциите - в случая колона 2 ($2), 
да бъде различна от p, където казваме по-нататък, че p е $2 (колона 2). Поставяме s и m да бъдат равни на 0. В s събираме броя 
на регистрираните случаи (колона 4 - $4), а в m събираме броя на смъртните случаи (колона 5 - $5). Всеки път изкарваме на 
изхода p, s, m, а когато вече срещнем нова провинция, тогава отново казваме, че s и m са равни на 0, тоест един вид нулираме 
събраните суми досега и започваме отначало, защото се намираме в нова провинция. Накрая (след END) отново извеждаме p, s, m, 
защото ако го няма, то ще изкараме с един ред по-малко (няма да изкараме последния ред, а на нас ни трябва).
Дотук имаме:

join -t ',' <(sort city_province.csv) <(sort spread.csv) | 
sort -t ',' -k2 |
awk -F ',' '$2!=p{ print p, s, m; p=$2; s=0; m=0} {s+=$4; m+=$5 } END { print p, s, m }'

4. Сега ние искаме да изведем <името на провинцията на китайски език> : <ниво на смъртност, закръглено надолу>. За тази цел
можем да използваме:

awk -F ' ' '{ print $1 echo ": " int(($3/$2)*1000) }' -> за разделител взимаме празното място, защото миналият awk ще ни изведе
колоните, разделени с по едно празно място. След това изкарваме първата колона, където са имената на провинциите на китайски
език, след което извеждаме : , а накрая вече в последната колона изчисляваме нивото на смъртност, което е равно на (броя на
смъртните случаи/броя на регистрираните случаи)*1000, закръглено надолу. Броят на смъртните случаи е в колона 3, а броят на
регистрираните случаи е в колона 2 (заради миналия awk). Нивото на смъртност в случая ще ни бъде равно на ($3/$2)*1000 и отпред
слагаме int, за да можем да закръглим надолу.

Дотук имаме:
join -t ',' <(sort city_province.csv) <(sort spread.csv) | 
sort -t ',' -k2 |
awk -F ',' '$2!=p{ print p, s, m; p=$2; s=0; m=0} {s+=$4; m+=$5 } END { print p, s, m }' |
awk -F ' ' '{ print $1 echo ": " int(($3/$2)*1000) }'

5. Вече имаме имената на провинциите на китайски език и нивото на смъртност за всяка една провинция, като двете са разделени с
двоеточие (както се иска от условието). Сега нашата задача е да подредим информацията спрямо нивото на смъртност и да вземем
първите 10 провинции с най-високо ниво на смъртност. За тази цел може да използваме:

sort -nr -t ':' -k2 | head -n 10 -> подреждаме спрямо колона 2, като за разделител взимаме двоеточие, подреждаме ги числово и в 
обратен ред, за да може най-отгоре да са провинциите с най-високо ниво на смъртност. След това взимаме първите 10 такива 
провинции.

Краен отговор:
join -t ',' <(sort city_province.csv) <(sort spread.csv) | 
sort -t ',' -k2 |
awk -F ',' '$2!=p{ print p, s, m; p=$2; s=0; m=0} {s+=$4; m+=$5 } END { print p, s, m }' |
awk -F ' ' '{ print $1 echo ": " int(($3/$2)*1000) }' |
sort -nr -t ':' -k2 | 
head -n 10

След това пишем vi top_provinces.sh
Пишем: 
#!/bin/bash
printf '%s\n' "$(join -t ',' <(sort city_province.csv) <(sort spread.csv) | sort -t ',' -k2 |
awk -F ',' '$2!=p{ print p, s, m; p=$2; s=0; m=0} {s+=$4; m+=$5 } END { print p, s, m }' |
awk -F ' ' '{ print $1 echo ": " int(($3/$2)*1000) }' | sort -nr -t ':' -k2 | head -n 10)"

Запазваме съответния файл, като по този начин го създаваме вече окончателно.
Променяме правата на създадения от нас файл: chmod 755 top_provinces.csv и вече можем да го извикаме в терминала.


d) Напишете shell script-ове `top_cities_en.sh` и `top_provinces_en.sh`,
които работят аналогично на `top_cities.sh` и `top_provinces.sh`, обаче след
имената на градове или провинции извеждат в скоби и тяхното английско име.

И двата shell script-a ще приличат много на предходните два.

Нека да видим какво ще ни трябва за top_cities_en.sh. 

1. За да вземем имената на градовете и на китайски език, и на английски език, отново би трябвало да използваме join. В случая 
можем да използваме файловете city.csv и spread.csv. И в двата файла в първата колона са имената на градовете на китайски език, 
което означава, че можем да съединим двата файла на базата на тази колона. За тази цел отново трябва да ги сортираме. Може да 
използваме join по същия начин, както в миналата задача:

join -t ',' <(sort city.csv) <(sort spread.csv) -> по този начин подреждаме файловете city.csv и spread.csv, след което ги 
съединяваме спрямо първата колона (защото не сме подали друга колона) и отново взимаме за разделител символ ',' (и в двата 
файла информацията е разделена чрез този символ). Сега вече имаме <името на града на китайски език>,<името на града на 
английски език> и останалата информация от spread.csv

2. Сега ни остана да използваме това, което използваме и в top_cities.sh. В случая ще вземем 4-тата колона, защото 
условието е, че трябва броят на регистрираните случаи да е поне 101, а тъй като имаме една колона в повече заради имената на 
градовете на английски език, то броят на регистрираните случаи не е вече в колона 3, а в колона 4.

awk -F ',' '$4>=101 { print $1 echo " ("$2"): " int(($5/$4)*1000 ) }' -> взимаме за разделител символа ',', след което 
проверяваме дали броят на регистрираните случаи е поне 101. Ако е над 101, тогава изкарваме първата колона, която съдържа 
имената на градовете на китайски език, след това поставяме празно място, отваряме ( и вътре в нея изкарваме колона 2 ($2), 
която  съдържа имената на градовете на английски език. В случая ограждаме $2 с "", за да може да изкара колона 2, а ако ги 
няма тези  кавички "", то тогава ще изкара навсякъде буквално $2, а не колона 2. След това затваряме ), поставяме : и празно 
място и  затваряме главните кавички на echo, след което трябва да пресметнем нивото на смъртност за всеки един град - 
($5/$4)*1000, броят на смъртните случаи е в колона 5, а броят на регистрираните случаи е в колона 4. За да закръглим надолу, 
поставяме отпред int и целия израз го ограждаме в кръгли скоби.

Дотук имаме: join -t ',' <(sort city.csv) <(sort spread.csv) | 
             awk -F ',' '$4>=101 { print $1 echo   " ("$2"): " int(($5/$4)*1000) }' | 

3. Изкарали сме информацията във формата, в който се иска от условието. Сега остана да подредим изхода по ниво на смъртност 
и да изкараме градовете, в които има най-висока смъртност. Това може да стане по следния начин:

sort -t ':' -nr -k2 | head -n 10 -> подреждаме спрямо втора колона (спрямо ниво на смъртност), използвайки за разделител 
двоеточието. Подреждаме ги числово и в обратен ред, за да вземем първите 10 града с най-висока смъртност.

Краен отговор:
join -t ',' <(sort city.csv) <(sort spread.csv) | 
awk -F ',' '$4>=101 { print $1 echo   " ("$2"): " int(($5/$4)*1000) }' |
sort -t ':' -nr -k2 | 
head -n 10

След това пишем vi top_cities_en.sh
Пишем: 
#!/bin/bash
printf '%s\n' "$(join -t ',' <(sort city.csv) <(sort spread.csv) | awk -F ',' '$4>=101 { print $1 echo   " ("$2"): " 
int(($5/$4)*1000) }' | sort -t ':' -nr -k2 | head -n 10)"

Запазваме съответния файл, като по този начин го създаваме вече окончателно.
Променяме правата на създадения от нас файл: chmod 755 top_cities_en.csv и вече можем да го извикаме в терминала.

Нека да видим сега за top_provinces_en.sh

1. В случая трябва да изведем имената на провинциите и на китайски език, и на английски език, които имат най-високо ниво 
на смъртност. Можем да съединим файловете city_province.csv и spread.csv, защото и в двата файла първите колони са имената 
на градовете на китайски език и можем да ги слеем спрямо тази колона. За таци цел отново ще използваме командата join, като 
на нея трябва да й подадем двата файла, подредени спрямо първата колона (така е по подразбиране, когато не напишем спрямо 
коя колона подреждаме).

join -t ',' <(sort city_province.csv) <(sort spread.csv)

2. Изходът ни сега има <имената на градовете на китайски език>,<имената на провинциите на китайски език> и останалата 
информация  от spread.csv. Сега на нас главно ни трябват колоните, които съдържат имената на провинциите на китайски език, 
броя на регистрираните случаи и броя на смъртните случаи. За тази цел можем да използваме awk, за да изкараме колони 2, 4 
и 5, които съдържат тази информация:

awk -F ',' '{ print $2,$4,$5 }'

Дотук имаме: join -t ',' <(sort city_province.csv) <(sort spread.csv) | 
             awk -F ',' '{ print $2,$4,$5 }'

3. Информацията, която имаме в момента на изхода е разделена чрез празно място. За да я представим, разделена със запетаи, 
можем да използваме командата sed и след това да съединим спрямо първа колона този изход с файла province.csv, за да можем 
да разполагаме с имената на провинциите и на английски език.

sed 's/ /,/g' -> навсякъде заместваме празните места с ','

Дотук имаме: join -t ',' <(sort city_province.csv) <(sort spread.csv) | 
             awk -F ',' '{ print $2,$4,$5 }' |
	     sed 's/ /,/g'

4. Сега добавяме и команда sort, за да подредим спрямо имената на провинциите получения изход. Имената на провинциите на 
китайски език са в първата колона, което означава, че няма нужда да казваме по коя колона подреждаме.

Дотук имаме: join -t ',' <(sort city_province.csv) <(sort spread.csv) | 
             awk -F ',' '{ print $2,$4,$5 }' |
	     sed 's/ /,/g' |
             sort

5. Сега, за да съединим този изход с файла province.csv, можем да направим следното: Можем пред цялата тази команда дотук 
да добавим команда join, като подадем <(sort province.csv) и след това в другите <() да напишем нашата сегашна команда. До 
този момент ще имаме:

join -t ',' <(sort province.csv) <(join -t ',' <(sort city_province.csv) <(sort spread.csv) | 
awk -F ',' '{ print $2,$4,$5 }' |
sed 's/ /,/g' |
sort)

6. Сега ще имаме <имената на провинциите на китайски език>,<имената на провинциите на английски език>,<брой регистрирани 
случаи>,<брой смъртни случаи> и то подредени спрямо първата колона (тоест спрямо имената на провинциите на китайски език). 
Сега нашата цел е да съберем броя на регистрираните случаи и броя на смъртните случаи за всяка една провинция, за да може 
след това за всяка една отделна провинция да изчислим нивото на смъртност. За тази цел може да използваме следната команда:

awk -F ',' '$1!=p{ print p, f, s, m; p=$1; f=$2; s=0; m=0} {s+=$3; m+=$4} END { print p, f, s, m }'

В случая използваме за разделител символа ','. Ние искаме да събираме, докато не срещнем различна провинция от сегашната. 
Можем да направим ограничението чрез $1!=p, където по-нататък казваме, че p е първата колона и всеки път, когато отидем 
на нова провинция, p става новата провинция. В случая f казваме, че е втората колона (провинцията на английски език) и при 
срещането на всяка нова провинция имаме s и m, които стават равни на 0 (тоест нулират сумите до този момент). Всеки път 
ние извеждаме p, f, s и m. Всеки път, след като сме нулирали s и m, извършваме събиране на броя на регистрираните случаи 
в s и броя на смъртните случаи в m. Броят на регистрираните случаи е в колона 3, а броят на смъртните случаи е в колона 4. 
Накрая (след END) извеждаме p, f, s и m (ако го няма това последно извеждане, няма да изведем последната провинция и 
информацията за нея).

Дотук имаме:
join -t ',' <(sort province.csv) <(join -t ',' <(sort city_province.csv) <(sort spread.csv) | 
awk -F ',' '{ print $2,$4,$5 }' |
sed 's/ /,/g' |
sort) |
awk -F ',' '$1!=p{ print p, f, s, m; p=$1; f=$2; s=0; m=0} {s+=$3; m+=$4} END { print p, f, s, m }'

7. Сега трябва да изведем информацията така, както я искат от самото условие:
<име на провинция на китайски език> (<име на провинция на английски език>): <ниво на смъртност>

За това може да използваме: awk -F ' ' '{ print $1 echo " ("$2"): " int(($4/$3)*1000) }' -> тук използваме абсолютно 
същата логика като при top_provinces.sh, по абсолютно същия начин изкарваме

8. Подреждането спрямо ниво на смъртност е същото като при top_provinces.sh

sort -nr -t ':' -k2 | head -n 10

Краен отговор:
join -t ',' <(sort province.csv) <(join -t ',' <(sort city_province.csv) <(sort spread.csv) | 
awk -F ',' '{ print $2,$4,$5 }' |
sed 's/ /,/g' |
sort) |
awk -F ',' '$1!=p{ print p, f, s, m; p=$1; f=$2; s=0; m=0} {s+=$3; m+=$4} END { print p, f, s, m }' |
awk -F ' ' '{ print $1 echo " ("$2"): " int(($4/$3)*1000) }' | 
sort -nr -t ':' -k2 | 
head -n 10

Пишем в терминала vi top_provinces_en.sh
Там въвеждаме:
#!/bin/bash
printf "%s\n" "$(join -t ',' <(sort province.csv) <(join -t ',' <(sort city_province.csv) <(sort spread.csv) | awk -F ',' 
'{ print $2,$4,$5 }' | sed 's/ /,/g' | sort) | awk -F ',' '$1!=p{ print p, f, s, m; p=$1; f=$2; s=0; m=0} {s+=$3; m+=$4} END 
{ print p, f, s, m }' | awk -F ' ' '{ print $1 echo " ("$2"): " int(($4/$3)*1000) }' | sort -nr -t ':' -k2 | head -n 10)"

Запазваме top_provinces_en.sh и променяме правата на script-a:
chmod 755 top_provinces_en.sh, след което можем вече да го извикаме и в терминала.

----------------------
Използвани материали: |
----------------------

1. Използване на int() за закръгляне надолу: 
https://stackoverflow.com/questions/5027628/how-to-truncate-of-a-real-value-and-discard-its-non-integer-part-in-awk

2. Събиране на редове, които имат еднакви полета с имена: 
https://stackoverflow.com/questions/42024296/sum-duplicate-row-values-with-awk

3. Използване на командата join:
https://www.geeksforgeeks.org/join-command-linux/
https://unix.stackexchange.com/questions/49360/how-to-sort-and-join-at-the-same-time
https://unix.stackexchange.com/questions/298436/can-i-join-against-a-command

